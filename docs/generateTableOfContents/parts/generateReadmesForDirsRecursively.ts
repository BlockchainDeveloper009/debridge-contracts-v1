import {writeFileSync} from "fs";
import {upperFirst} from "lodash";
import assert from "assert";
import {FileEntry, ListOfFiles} from "./types/ListOfFiles";
import {README_NAME} from "./constants";
import {isDir, isFile, notReadme} from "./filters";
import {toLink} from "./toLink";

const TOP_LEVEL = 2;

export default function generateReadmesForDirsRecursively(path: string, listOfFiles: ListOfFiles): void {
    const md = convertListOfFilesToMarkdown(path, listOfFiles);
    writeFileSync(`${path}/${README_NAME}`, md);

    const dirEntries = Object.entries(listOfFiles).filter(isDir);
    dirEntries.forEach(
        ([name, content]) => generateReadmesForDirsRecursively(`${path}${name}/`, content)
    );
}

function convertListOfFilesToMarkdown(
    path: string,
    listOfFiles: ListOfFiles,
    headerDepth = TOP_LEVEL,
): string {
    const pathDepth = path.split('/').length;

    const textOnTop = headerDepth === TOP_LEVEL ? '<!--This file is autogenerated-->\n' : '';
    const header = getLastDirFromPath(path);
    const title = headerDepth === TOP_LEVEL ? '' : `\n${'#'.repeat(headerDepth)} ${upperFirst(header)}\n`;

    const entries = Object.entries(listOfFiles);
    const fileEntries = entries.filter(isFile).filter(notReadme);

    const makePathRelative = ([fileName, filePath]: FileEntry): FileEntry => [
        fileName,
        filePath
            .split('/')
            .slice(pathDepth - headerDepth - 1)
            .join('/')
    ];

    const filesAsMarkdown = fileEntries
        .map(makePathRelative)
        .map(([fileName, filePath]) => toLink(fileName, filePath))
        .join('\n')
    ;

    const dirEntries = entries.filter(isDir);

    const dirsAsMarkdown = dirEntries.map(([dirName, dirContent]) =>
        convertListOfFilesToMarkdown(`${path}${dirName}/`, dirContent, headerDepth + 1)
    ).join('\n');

    return `${textOnTop}${title}${filesAsMarkdown}${dirsAsMarkdown}`;
}

function getLastDirFromPath(path: string): string {
    const pathWithoutTrailingSlash = path.replace(/\/$/, '');
    const result = pathWithoutTrailingSlash.split('/').pop();

    assert(typeof result === 'string');
    return result;
}